
worker_processes 1;

        events { worker_connections 1024; }

        http {

        upstream v1.authentication-service.dev {
        server authentication-service:3200;
}

        server {
        listen 4200; # nginx port

            # If we use CORS (or simple use configuration from spring cors
            # add the header , to allow web app from another nginx ( port 5200 ) and avoid CORS :  (for prod add domain like : https://www.mydomain.com;)
            # add_header 'Access-Control-Allow-Origin' 'http://localhost:5200';
            # add_header 'Access-Control-Allow-Credentials' 'true';
            # add_header 'Access-Control-Allow-Headers' 'Authorization,Accept,Origin,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range';
            # add_header 'Access-Control-Allow-Methods' 'GET,POST,OPTIONS,PUT,DELETE,PATCH';


        location /authentication-service/ {
        proxy_pass http://v1.authentication-service.dev/;
                proxy_redirect     off;
                proxy_set_header   Host $host;
        proxy_set_header   X-Real-IP $remote_addr;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header   X-Forwarded-Host $server_name;
}

            # FRONT application reverse proxy to avoid CORS
        #location / {
        #proxy_pass http://app.v1.dev/;
         #       proxy_redirect     off;
          #      proxy_set_header   Host $host;
       # proxy_set_header   X-Real-IP $remote_addr;
       # proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        #        proxy_set_header   X-Forwarded-Host $server_name;
       # proxy_http_version 1.1;
       # proxy_set_header Upgrade $http_upgrade;
       # proxy_set_header Connection "upgrade";
#}

                                                                                                                                            #location / {
                   #proxy_pass http://localhost;
                   #proxy_set_header Host $host;
                   #}


                   #location /service1 {
                   #proxy_pass http://springbootservice1:8080/service1/;
                   #}
                   #location /service2 {
                   #proxy_pass http://springbootservice2:8080/service2/;
                   #}

                   #location / {
                   #  proxy_pass http://api;
                   # proxy_set_header Host $host:$server_port;
                   #proxy_set_header X-Forwarded-Host $server_name;
                   #proxy_set_header X-Real-IP $remote_addr;
                   #proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                   #}




                   #location /static {
                   #        access_log   off;
                   #       expires      30d;

                   #      alias /app/static;
                   # }
}

}
